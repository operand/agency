#!/usr/bin/env bash


# This script mostly passes subcommands to docker-compose but additionally:
# - adds some custom subcommands
# - overrides some subcommands to add default options
# - builds changes before every subcommand

set -ae
source .env


function dc() {
  echo "Running (docker-compose $@) ..."
  eval "docker-compose $@"
}


SUBCOMMAND=$1
if [ -z "$SUBCOMMAND" ]; then
  dc --help
  exit 1
fi
shift


# a custom build command that builds the main service
if [[ "$SUBCOMMAND" == "build" ]]; then
  command="build $@"


# add default arguments to these compose commands
elif [[ "$SUBCOMMAND" == "run" ]]; then
  command="$SUBCOMMAND --rm --service-ports $@"
elif [[ "$SUBCOMMAND" == "up" ]]; then
  command="$SUBCOMMAND --remove-orphans --abort-on-container-exit $@"
elif [[ "$SUBCOMMAND" == "down" ]]; then
  command="$SUBCOMMAND --remove-orphans $@"


# otherwise just pass the subcommand through to docker-compose
else
  command="$SUBCOMMAND $@"
fi


# build changes first unless the subcommand is build
if [ "$SUBCOMMAND" != "build" ]; then
  echo "Building changes ..."
  if [ $QUIET_BUILD_CHANGES ]; then
    dc build --quiet || (
      echo "Building changes failed. Run 'op build' to find out why."
      exit 1
    )
  else
    dc build
  fi

  echo "Cleaning up dangling images ..."
  if [ $QUIET_BUILD_CHANGES ]; then
    docker image prune -f > /dev/null
  else
    docker image prune -f
  fi
fi


dc $command
