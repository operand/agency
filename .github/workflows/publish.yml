name: publish

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Install dependencies
      run: npm install @iarna/toml

    - name: Check for version changes
      id: check_version
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const execSync = require('child_process').execSync;
          const toml = require('@iarna/toml');
          const current = fs.readFileSync('pyproject.toml', 'utf8');
          execSync('git checkout HEAD^1 pyproject.toml');
          const previous = fs.readFileSync('pyproject.toml', 'utf8');
          execSync('git checkout HEAD pyproject.toml');
          const currentVersion = toml.parse(current).tool.poetry.version;
          const previousVersion = toml.parse(previous).tool.poetry.version;
          const versionChanged = currentVersion !== previousVersion;
          if (versionChanged) {
            console.log(`version changed from ${previousVersion} to ${currentVersion}`);
            return currentVersion;
          } else {
            console.log(`version did not change from ${previousVersion}`);
          }

    - name: Install Poetry
      if: ${{ steps.check_version.outputs.result }}
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1

    - name: Build and publish
      if: ${{ steps.check_version.outputs.result }}
      run: |
        echo "Building version ${{ steps.check_version.outputs.result }} ..."
        poetry build
        echo "Publishing ..."
        poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}

    - name: Create tag
      if: ${{ steps.check_version.outputs.result }}
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: v${{ steps.check_version.outputs.result }}

    - name: Create GitHub release
      id: create_release
      if: ${{ steps.check_version.outputs.result }}
      uses: actions/github-script@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const version = ${{ steps.check_version.outputs.result }};
          console.log(`Creating GitHub release for v${version} ...`)
          const response = await github.getOctokit(process.env.GITHUB_TOKEN).repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `v${version}`,
            body: `Release v${version}`,
          });
          console.log(`Release created at ${response.data.html_url}`)
          return response.data.upload_url;

    - name: Get built asset names
      id: get_asset_names
      if: ${{ steps.check_version.outputs.result }}
      run: |
        version=${{ steps.check_version.outputs.result }}
        whl_file=$(ls dist/*.whl)
        tar_file=$(ls dist/*.tar.gz)
        whl_name=$(basename $whl_file)
        tar_name=$(basename $tar_file)
        echo "whl_file=$whl_file" >> $GITHUB_ENV
        echo "tar_file=$tar_file" >> $GITHUB_ENV
        echo "whl_name=$whl_name" >> $GITHUB_ENV
        echo "tar_name=$tar_name" >> $GITHUB_ENV

    - name: Print variables
      run: |
        echo ${{ env.whl_file }}
        echo ${{ env.tar_file }}
        echo ${{ env.whl_name }}
        echo ${{ env.tar_name }}

    - name: Upload .whl asset to GitHub release
      if: ${{ steps.check_version.outputs.result }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ${{ env.whl_file }}
        asset_name: ${{ env.whl_name }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload .tar.gz asset to GitHub release
      if: ${{ steps.check_version.outputs.result }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ${{ env.tar_file }}
        asset_name: ${{ env.tar_name }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
