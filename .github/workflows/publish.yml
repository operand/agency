name: publish

on:
  push:
    branches:
      - main
      - build # TEMPORARY!!!

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Install dependencies
      run: npm install @iarna/toml

    - name: Check for version changes
      id: check_version
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const execSync = require('child_process').execSync;
          const toml = require('@iarna/toml');
          const current = fs.readFileSync('pyproject.toml', 'utf8');
          execSync('git checkout HEAD^1 pyproject.toml');
          const previous = fs.readFileSync('pyproject.toml', 'utf8');
          execSync('git checkout HEAD pyproject.toml');
          const currentVersion = toml.parse(current).tool.poetry.version;
          const previousVersion = toml.parse(previous).tool.poetry.version;
          const versionChanged = currentVersion !== previousVersion;
          if (versionChanged || true) { // TEMPORARY!!!
            console.log(`version changed from ${previousVersion} to ${currentVersion}`);
            return currentVersion;
          } else {
            console.log(`version did not change from ${previousVersion}`);
          }

    - name: Install Poetry
      if: ${{ steps.check_version.outputs.result }}
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1

    - name: Build and publish
      if: ${{ steps.check_version.outputs.result }}
      run: |
        echo "Building and publishing v${{ steps.check_version.outputs.result }} ..."
        echo "skipped for now"
        # poetry build
        # poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}

    - name: Create tag
      if: ${{ steps.check_version.outputs.result }}
      run: |
        echo "Creating tag v${{ steps.check_version.outputs.result }} ..."
        echo "skipped for now"
        # git tag "v${{ steps.check_version.outputs.result }}"
        # git push origin "v${{ steps.check_version.outputs.result }}"

    - name: Create GitHub release
      id: create_release
      if: ${{ steps.check_version.outputs.result }}
      uses: actions/github-script@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const version = ${{ steps.check_version.outputs.result }};
          console.log(`Creating GitHub release for v${version} ...`)
          console.log("skipped for now")
          // const response = await github.getOctokit(process.env.GITHUB_TOKEN).repos.createRelease({
          //   owner: context.repo.owner,
          //   repo: context.repo.repo,
          //   tag_name: `v${version}`,
          //   name: `v${version}`,
          //   body: `Release v${version}`,
          // });
          // return response.data.upload_url;

    # - name: Upload built assets to GitHub release
    #   if: ${{ steps.check_version.outputs.result }}
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.result }}
    #     asset_path: ./dist/your-built-package.whl
    #     asset_name: your-built-package.whl
    #     asset_content_type: application/octet-stream
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
